# Maintainer: Giancarlo Razzolini <grazzolini@archlinux.org>
# Maintainer: Frederik Schwan <freswa at archlinux dot org>
# Contributor: Bart≈Çomiej Piotrowski <bpiotrowski@archlinux.org>
# Contributor: Allan McRae <allan@archlinux.org>

# toolchain build order: linux-api-headers->glibc->binutils->gcc->glibc->binutils->gcc
# NOTE: valgrind requires rebuilt with each major glibc version

pkgbase=glibc
pkgname=glibc
pkgver=2.38
_commit=6b99458d197ab779ebb6ff632c168e2cbfa4f543
pkgrel=4
arch=(loong64 x86_64)
url='https://www.gnu.org/software/libc'
license=(GPL LGPL)
makedepends=(git gd python)
options=(staticlibs !lto)
source=(git+https://sourceware.org/git/glibc.git#commit=${_commit}
        locale.gen.txt
        locale-gen
        lib32-glibc.conf
        sdt.h sdt-config.h
        reenable_DT_HASH.patch
        fix-malloc-p1.patch
        fix-malloc-p2.patch
	0001-LoongArch-Redefine-macro-LEAF-ENTRY.patch
	0002-LoongArch-Add-minuimum-binutils-required-version.patch
	0003-Loongarch-Add-ifunc-support-and-add-different-versio.patch
	0004-elf-Add-new-LoongArch-reloc-types-101-to-108-into-el.patch
	0005-LoongArch-elf-Add-new-LoongArch-reloc-types-109-into.patch
	0006-Loongarch-Add-ifunc-support-for-strchr-aligned-lsx-l.patch
	0007-Loongarch-Add-ifunc-support-for-memcpy-aligned-unali.patch
	0008-LoongArch-Add-ifunc-support-for-strnlen-aligned-lsx-.patch
	0009-LoongArch-Add-ifunc-support-for-strcmp-aligned-lsx.patch
	0010-LoongArch-Add-ifunc-support-for-strncmp-aligned-lsx.patch
	0011-LoongArch-Simplify-the-autoconf-check-for-static-PIE.patch
	0012-LoongArch-Remove-support-code-for-old-linker-in-star.patch
	0013-LoongArch-Micro-optimize-LD_PCREL.patch
	0014-LoongArch-Add-ifunc-support-for-rawmemchr-aligned-ls.patch
	0015-LoongArch-Add-ifunc-support-for-memchr-aligned-lsx-l.patch
	0016-LoongArch-Add-ifunc-support-for-memrchr-lsx-lasx.patch
	0017-LoongArch-Add-ifunc-support-for-memset-aligned-unali.patch
	0018-LoongArch-Add-ifunc-support-for-memcmp-aligned-lsx-l.patch
	0019-LoongArch-Change-loongarch-to-LoongArch-in-comments.patch
	0020-LoongArch-Add-lasx-lsx-support-for-_dl_runtime_profi.patch
)
validpgpkeys=(7273542B39962DF7B299931416792B4EA25340F8 # Carlos O'Donell
              BC7C7372637EC10C57D7AA6579C43DFBF1CF2187) # Siddhesh Poyarekar
b2sums=('SKIP'
        'c859bf2dfd361754c9e3bbd89f10de31f8e81fd95dc67b77d10cb44e23834b096ba3caa65fbc1bd655a8696c6450dfd5a096c476b3abf5c7e125123f97ae1a72'
        '04fbb3b0b28705f41ccc6c15ed5532faf0105370f22133a2b49867e790df0491f5a1255220ff6ebab91a462f088d0cf299491b3eb8ea53534cb8638a213e46e3'
        '7c265e6d36a5c0dff127093580827d15519b6c7205c2e1300e82f0fb5b9dd00b6accb40c56581f18179c4fbbc95bd2bf1b900ace867a83accde0969f7b609f8a'
        'a6a5e2f2a627cc0d13d11a82458cfd0aa75ec1c5a3c7647e5d5a3bb1d4c0770887a3909bfda1236803d5bc9801bfd6251e13483e9adf797e4725332cd0d91a0e'
        '214e995e84b342fe7b2a7704ce011b7c7fc74c2971f98eeb3b4e677b99c860addc0a7d91b8dc0f0b8be7537782ee331999e02ba48f4ccc1c331b60f27d715678'
        '35e03ed912e1b0cd23783ab83ce919412885c141344905b8b67bbad4a86c48cf3e893806060e48d5737514ff80cea0b58b0e1f15707c32224579c416dcd810c0'
        '28c983bcebc0eeeb37a60756ccee50d587a99d5e2100430d5c0ee51a19d9b2176a4013574a7d72b5857302fbb60d371bbf0b3cdb4fc700a1dbe3aae4a42b04b9'
        'c3e94f5b0999878ff472e32f49dc13c20eb9db68c633017cb7824617eb824cf6cff7ea53b92962926e0ee84fd39736616298dcb926356625dd124f3754e79932'
        '3113e6c5c9ce4bf72618eee0232b6b61e2b044945912ccb2cdffd9fb32532ba0a0ede52f86ef745bf0db7a84a8c89c920d71baf646be6b5a1d453c6ba291cfe9'
        '6c67b4444ecb219c1ff413fd5172b42149be110f7cb6af7a4d87e2dbdbfd016abb1910e968dab1ec69ace823c7641023d22d80256c7d1c8594eb705c0c9109b2'
        'f6d0d0194ccbedc648798175a25627530c2c31e3f29119427b7de5f8dfba8b663280e23acbac703d35e7f3183c9a5b66c902267192c6466e9c692294b36a46e2'
        '23f05ead7fa71fd87d595a5c19f78972c486e047a81fcf146842bf0beec0eb71e148e9d6815b84ac5994ba7e6e656079e162a9503f94450fe67e840e910cd50e'
        'be3db0167598e9c27555b00ccd89e0307569196f786a9018d49a6fe363086d9eefaef4f41edb70f85a1596e7618359526895431af8bdf5caccefd2dd15694e72'
        'c2ecf59437f7b49e8f29087251460c11bb5ed37408d8de760732e4910a73bb1f5ca7f50661ad251887c00dddd23eea67f22cabdfd29adca22fe7cfeb7ecaeb54'
        'f324f7e5c78e4a8843ea959331b4afa73f0241555f0ee730788ac4a34af157b3c6139d13edd47fc2af4a02e28abf372f5f4a912a1dc20689f7eec0d2c7dba384'
        'be9cd81e26f9ce16b6f43b908288a50eae7205255af74d9b1b89c0c492f4b925e1b2cb36a35e6b4032f487d42923ce9405150e80502424ec9ae0cae03006ee55'
        'dc842c176c282460afd33ef8be55db8d1d78b8b5dc4bb6b3c60c8a589eec4424cc4dad5a2cadb8f119f49fd5d543fc2e0782c23fee0bdd6829a258dd77efab1e'
        '01e6437aeb1ab8d2e5e783d33a946cb17c1be07cdace43af19956c319624d00f00730fbc37f459f5e6fdc2b571078b9a32c42957ed3b6b0c02a634d7fe0f9ef6'
        'a2feeef1d31459492a48318f89c0b7fc66974a1adbf53d41cffc3c0a33cf2c80e88d82ea08d4775ccd55a633c19561609f74f9bd5a1db8783c7bd3a50cb27c38'
        'c980e6696ae8d1591b49f1368a4e4462d7d9cfeb47f24fe773c87576aea4f64ac6048f57849be1558e73368a22079c624b8945d9a8bc1ac260ad4fed5e63a907'
        '37b3fc47a435e5f4f270d1f62822b0965ba0a98e12589616750192a486d461c51314ac665b770e21db937897c7ede4ec10ddde4a0d74fe8b1d6353566834f038'
        'a0cbf52ffa41cd546d866e147f91f387422cb65f50c011194abe266211f061ffa3376ed1b186426bcf3f022954166f1f98040828bb443138026b3d72ae15b27a'
        '748bf61881a4139556e2e1491b85c1417543d03e22b17874101a1a8bc8b8d4f4880e0591206ba063101ef2abc07e99ac37c112736f45ad0eae1c188f74b29238'
        'd26c00f657448c8f2c29e5055eeebb4bfaf01f2632dc0a6cbb9bf100e6151f1b232e50fc0ada99f62e07d9696327b320e3dae6163f0cc53828b3aaccba0f8a80'
        'cd78fb5b43681a5f990b12cad1608e36c675edc97a2f95e7e12a6a88de496077b8fd7854535c8c46f1b77b248b4d57e64a25ad0305725f0c23f1459129b17f3b'
        '5e0dc1133e3694f4186a3d91df6661a933ca124bca6516cb71bd6b2bd5d26db85695281902bc8c7cd3d146af7506511952525d7ee61fe77752058a69083614f3'
        'b0e1f3be76d13e3a3a80c3fb34ac13331bbef7849fd8e61c3bc6b597df0f8842c32424f2b0dc5315216c734ba863f696d01ef479285988dcc8f5f8e6ba888eee'
        '43a7a3e54a514372acc3fef031111ab0820b078f244b555570df51de4271e6138d335bf2db7cd57bb360ff17e084f5368232ffc3f4738cbb0a89094760bebd20')

prepare() {
  mkdir -p glibc-build

  [[ -d glibc-$pkgver ]] && ln -s glibc-$pkgver glibc
  cd glibc

  # Re-enable `--hash-style=both` for building shared objects due to issues with EPIC's EAC
  # which relies on DT_HASH to be present in these libs.
  # reconsider 2023-01
  patch -Np1 -i "${srcdir}"/reenable_DT_HASH.patch

  patch -Np1 -i "${srcdir}"/fix-malloc-p1.patch
  patch -Np1 -i "${srcdir}"/fix-malloc-p2.patch
  patch -Np1 -i "$srcdir/"0001-LoongArch-Redefine-macro-LEAF-ENTRY.patch
  patch -Np1 -i "$srcdir/"0002-LoongArch-Add-minuimum-binutils-required-version.patch
  patch -Np1 -i "$srcdir/"0003-Loongarch-Add-ifunc-support-and-add-different-versio.patch
  patch -Np1 -i "$srcdir/"0004-elf-Add-new-LoongArch-reloc-types-101-to-108-into-el.patch
  patch -Np1 -i "$srcdir/"0005-LoongArch-elf-Add-new-LoongArch-reloc-types-109-into.patch
  patch -Np1 -i "$srcdir/"0006-Loongarch-Add-ifunc-support-for-strchr-aligned-lsx-l.patch
  patch -Np1 -i "$srcdir/"0007-Loongarch-Add-ifunc-support-for-memcpy-aligned-unali.patch
  patch -Np1 -i "$srcdir/"0008-LoongArch-Add-ifunc-support-for-strnlen-aligned-lsx-.patch
  patch -Np1 -i "$srcdir/"0009-LoongArch-Add-ifunc-support-for-strcmp-aligned-lsx.patch
  patch -Np1 -i "$srcdir/"0010-LoongArch-Add-ifunc-support-for-strncmp-aligned-lsx.patch
  patch -Np1 -i "$srcdir/"0011-LoongArch-Simplify-the-autoconf-check-for-static-PIE.patch
  patch -Np1 -i "$srcdir/"0012-LoongArch-Remove-support-code-for-old-linker-in-star.patch
  patch -Np1 -i "$srcdir/"0013-LoongArch-Micro-optimize-LD_PCREL.patch
  patch -Np1 -i "$srcdir/"0014-LoongArch-Add-ifunc-support-for-rawmemchr-aligned-ls.patch
  patch -Np1 -i "$srcdir/"0015-LoongArch-Add-ifunc-support-for-memchr-aligned-lsx-l.patch
  patch -Np1 -i "$srcdir/"0016-LoongArch-Add-ifunc-support-for-memrchr-lsx-lasx.patch
  patch -Np1 -i "$srcdir/"0017-LoongArch-Add-ifunc-support-for-memset-aligned-unali.patch
  patch -Np1 -i "$srcdir/"0018-LoongArch-Add-ifunc-support-for-memcmp-aligned-lsx-l.patch
  patch -Np1 -i "$srcdir/"0019-LoongArch-Change-loongarch-to-LoongArch-in-comments.patch
  patch -Np1 -i "$srcdir/"0020-LoongArch-Add-lasx-lsx-support-for-_dl_runtime_profi.patch
}

build() {
  local _configure_flags=(
      --prefix=/usr
      --with-headers=/usr/include
      --with-bugurl=https://bugs.archlinux.org/
      --enable-bind-now
      --enable-cet
      --enable-fortify-source
      --enable-kernel=4.4
      --enable-multi-arch
      --enable-stack-protector=strong
      --enable-systemtap
      --disable-profile
      --disable-werror
#      --enable-add-ons
#      --enable-lock-elision
#      --enable-stackguard-randomization
#      --disable-experimental-malloc
#      --enable-static-pie
  )

  cd "${srcdir}"/glibc-build

  echo "slibdir=/usr/lib" >> configparms
  echo "rtlddir=/usr/lib" >> configparms
  echo "sbindir=/usr/bin" >> configparms
  echo "rootsbindir=/usr/bin" >> configparms

  # Credits @allanmcrae
  # https://github.com/allanmcrae/toolchain/blob/f18604d70c5933c31b51a320978711e4e6791cf1/glibc/PKGBUILD
  # remove fortify for building libraries
  # CFLAGS=${CFLAGS/-Wp,-D_FORTIFY_SOURCE=2/}

  "${srcdir}"/glibc/configure \
      --libdir=/usr/lib \
      --libexecdir=/usr/lib \
      "${_configure_flags[@]}"

  make -O

  # build info pages manually for reproducibility
  make info

#  cd "${srcdir}"/lib32-glibc-build
#  export CC="gcc -m32 -mstackrealign"
#  export CXX="g++ -m32 -mstackrealign"
#
#  echo "slibdir=/usr/lib32" >> configparms
#  echo "rtlddir=/usr/lib32" >> configparms
#  echo "sbindir=/usr/bin" >> configparms
#  echo "rootsbindir=/usr/bin" >> configparms
#
#  "${srcdir}"/glibc/configure \
#      --host=i686-pc-linux-gnu \
#      --libdir=/usr/lib32 \
#      --libexecdir=/usr/lib32 \
#      "${_configure_flags[@]}"
#
#  make -O

  # pregenerate C.UTF-8 locale until it is built into glibc
  # (https://sourceware.org/glibc/wiki/Proposals/C.UTF-8, FS#74864)-
  elf/ld.so --library-path "$PWD" locale/localedef -c -f ../glibc/localedata/charmaps/UTF-8 -i ../glibc/localedata/locales/C ../C.UTF-8/
}

# Credits for skip_test() and check() @allanmcrae
# https://github.com/allanmcrae/toolchain/blob/f18604d70c5933c31b51a320978711e4e6791cf1/glibc/PKGBUILD
skip_test() {
  test=${1}
  file=${2}
  sed -i "/\b${test} /d" "${srcdir}"/glibc/${file}
}

check() {
  cd glibc-build

  # adjust/remove buildflags that cause false-positive testsuite failures
  sed -i '/FORTIFY/d' configparms                                     # failure to build testsuite
  sed -i 's/-Werror=format-security/-Wformat-security/' config.make   # failure to build testsuite
  sed -i '/CFLAGS/s/-fno-plt//' config.make                           # 16 failures
  sed -i '/CFLAGS/s/-fexceptions//' config.make                       # 1 failure
  LDFLAGS=${LDFLAGS/,-z,now/}                                         # 10 failures

  # The following tests fail due to restrictions in the Arch build system
  # The correct fix is to add the following to the systemd-nspawn call:
  # --system-call-filter="@clock @memlock @pkey"
  skip_test test-errno-linux        sysdeps/unix/sysv/linux/Makefile
  skip_test tst-mlock2              sysdeps/unix/sysv/linux/Makefile
  skip_test tst-ntp_gettime         sysdeps/unix/sysv/linux/Makefile
  skip_test tst-ntp_gettimex        sysdeps/unix/sysv/linux/Makefile
  skip_test tst-pkey                sysdeps/unix/sysv/linux/Makefile
  skip_test tst-process_mrelease    sysdeps/unix/sysv/linux/Makefile
  skip_test tst-adjtime             time/Makefile

  make -O check
}

package_glibc() {
  pkgdesc='GNU C Library'
  depends=('linux-api-headers>=4.10' tzdata filesystem)
  optdepends=('gd: for memusagestat'
              'perl: for mtrace')
  install=glibc.install
  backup=(etc/gai.conf
          etc/locale.gen
          etc/nscd.conf)

  make -C glibc-build install_root="${pkgdir}" install
  rm -f "${pkgdir}"/etc/ld.so.cache

  # Shipped in tzdata
  rm -f "${pkgdir}"/usr/bin/{tzselect,zdump,zic}

  cd glibc

  install -dm755 "${pkgdir}"/usr/lib/{locale,systemd/system,tmpfiles.d}
  install -m644 nscd/nscd.conf "${pkgdir}"/etc/nscd.conf
  install -m644 nscd/nscd.service "${pkgdir}"/usr/lib/systemd/system
  install -m644 nscd/nscd.tmpfiles "${pkgdir}"/usr/lib/tmpfiles.d/nscd.conf
  install -dm755 "${pkgdir}"/var/db/nscd

  install -m644 posix/gai.conf "${pkgdir}"/etc/gai.conf

  install -m755 "${srcdir}"/locale-gen "${pkgdir}"/usr/bin

  # Create /etc/locale.gen
  install -m644 "${srcdir}"/locale.gen.txt "${pkgdir}"/etc/locale.gen
  sed -e '1,3d' -e 's|/| |g' -e 's|\\| |g' -e 's|^|#|g' \
    "${srcdir}"/glibc/localedata/SUPPORTED >> "${pkgdir}"/etc/locale.gen

  # Add SUPPORTED file to pkg
  sed -e '1,3d' -e 's|/| |g' -e 's| \\||g' \
    "${srcdir}"/glibc/localedata/SUPPORTED > "${pkgdir}"/usr/share/i18n/SUPPORTED

  # install C.UTF-8 so that it is always available
  install -dm755 "${pkgdir}"/usr/lib/locale
  cp -r "${srcdir}"/C.UTF-8 -t "${pkgdir}"/usr/lib/locale
  sed -i '/#C\.UTF-8 /d' "${pkgdir}"/etc/locale.gen

  # Provide tracing probes to libstdc++ for exceptions, possibly for other
  # libraries too. Useful for gdb's catch command.
  install -Dm644 "${srcdir}"/sdt.h "${pkgdir}"/usr/include/sys/sdt.h
  install -Dm644 "${srcdir}"/sdt-config.h "${pkgdir}"/usr/include/sys/sdt-config.h

  # ldconfig comes from current system
  if [ -f /archlinux/XCHG/ldconfig ]; then
    install -Dm755 /archlinux/XCHG/ldconfig "${pkgdir}"/usr/bin/ldconfig
  fi
}

package_lib32-glibc() {
  pkgdesc='GNU C Library (32-bit)'
  depends=("glibc=$pkgver")
  options+=('!emptydirs')

  cd lib32-glibc-build

  make install_root="${pkgdir}" install
  rm -rf "${pkgdir}"/{etc,sbin,usr/{bin,sbin,share},var}

  # We need to keep 32 bit specific header files
  find "${pkgdir}"/usr/include -type f -not -name '*-32.h' -delete

  # Dynamic linker
  install -d "${pkgdir}"/usr/lib
  ln -s ../lib32/ld-linux.so.2 "${pkgdir}"/usr/lib/

  # Add lib32 paths to the default library search path
  install -Dm644 "${srcdir}"/lib32-glibc.conf "${pkgdir}"/etc/ld.so.conf.d/lib32-glibc.conf

  # Symlink /usr/lib32/locale to /usr/lib/locale
  ln -s ../lib/locale "${pkgdir}"/usr/lib32/locale
}
