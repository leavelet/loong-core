diff --git a/src/boot/efi/meson.build b/src/boot/efi/meson.build
index 299a01b9be..dca74ea190 100644
--- a/src/boot/efi/meson.build
+++ b/src/boot/efi/meson.build
@@ -24,6 +24,7 @@ efi_arch = {
         'x86_64':  ['x64', 'x86_64'],
         'arm':     ['arm', 'arm'],
         'aarch64': ['aa64', 'aarch64'],
+        'loongarch64': ['loongarch64', 'loongarch64'],
         'riscv64': ['riscv64', 'riscv64'],
 }.get(efi_arch, [])
 
@@ -184,6 +185,7 @@ efi_cflags = cc.get_supported_arguments(
                 '-Wall',
                 '-Wextra',
                 '-Wsign-compare',
+                '-Wno-warn-execstack',
         ]
 ) + [
         '-nostdlib',
@@ -204,6 +206,7 @@ efi_cflags += cc.get_supported_arguments({
         'ia32':   ['-mno-sse', '-mno-mmx'],
         'x86_64': ['-mno-red-zone', '-mno-sse', '-mno-mmx'],
         'arm':    ['-mgeneral-regs-only', '-mfpu=none'],
+        'loongarch64': ['-Wl,--no-warn-rwx-segments'],
 }.get(efi_arch[1], []))
 
 # We are putting the efi_cc command line together ourselves, so make sure to pull any
@@ -273,9 +276,9 @@ possible_link_flags = [
 ]
 efi_ldflags += cc.get_supported_link_arguments(possible_link_flags)
 
-if efi_arch[1] in ['aarch64', 'arm', 'riscv64']
+if efi_arch[1] in ['aarch64', 'arm', 'loongarch64', 'riscv64']
         efi_ldflags += ['-shared']
-        # Aarch64, ARM32 and 64bit RISC-V don't have an EFI capable objcopy.
+        # Aarch64, ARM32, 64bit LoongArch and RISC-V don't have an EFI capable objcopy.
         # Use 'binary' instead, and add required symbols manually.
         efi_ldflags += ['-Wl,--defsym=EFI_SUBSYSTEM=0xa']
         efi_format = ['-O', 'binary']
diff --git a/src/boot/efi/pe.c b/src/boot/efi/pe.c
index e16716498f..0d440bc0c9 100644
--- a/src/boot/efi/pe.c
+++ b/src/boot/efi/pe.c
@@ -19,6 +19,8 @@
         #define TARGET_MACHINE_TYPE EFI_IMAGE_MACHINE_AARCH64
 #elif defined(__arm__)
         #define TARGET_MACHINE_TYPE EFI_IMAGE_MACHINE_ARMTHUMB_MIXED
+#elif defined(__loongarch64)
+        #define TARGET_MACHINE_TYPE EFI_IMAGE_MACHINE_LOONGARCH64
 #elif defined(__riscv) && __riscv_xlen == 64
         #define TARGET_MACHINE_TYPE EFI_IMAGE_MACHINE_RISCV64
 #else
diff --git a/src/boot/efi/ticks.c b/src/boot/efi/ticks.c
index 45980bafe8..449282d05d 100644
--- a/src/boot/efi/ticks.c
+++ b/src/boot/efi/ticks.c
@@ -52,6 +52,12 @@ static UINT64 ticks_read(void) {
         __asm__ volatile ("mrs %0, cntpct_el0" : "=r" (val));
         return val;
 }
+#elif defined(__loongarch64)
+static UINT64 ticks_read(void) {
+        UINT64 val;
+        __asm__ volatile ("rdtime.d %0, $zero" : "=r" (val));
+        return val;
+}
 #else
 static UINT64 ticks_read(void) {
         return 0;
diff --git a/src/nspawn/nspawn-oci.c b/src/nspawn/nspawn-oci.c
index 86c014d25e..28abcd318b 100644
--- a/src/nspawn/nspawn-oci.c
+++ b/src/nspawn/nspawn-oci.c
@@ -1694,6 +1694,9 @@ static int oci_seccomp_arch_from_string(const char *name, uint32_t *ret) {
         } table[] = {
                 { "SCMP_ARCH_AARCH64",     SCMP_ARCH_AARCH64     },
                 { "SCMP_ARCH_ARM",         SCMP_ARCH_ARM         },
+#ifdef SCMP_ARCH_LOONGARCH64
+                { "SCMP_ARCH_LOONGARCH64", SCMP_ARCH_LOONGARCH64 },
+#endif
                 { "SCMP_ARCH_MIPS",        SCMP_ARCH_MIPS        },
                 { "SCMP_ARCH_MIPS64",      SCMP_ARCH_MIPS64      },
                 { "SCMP_ARCH_MIPS64N32",   SCMP_ARCH_MIPS64N32   },
